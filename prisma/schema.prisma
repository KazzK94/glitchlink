generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                 String         @id @default(uuid())
    username           String         @unique
    usernameLowercase  String         @unique
    name               String
    email              String         @unique
    password           String
    color              String
    createdAt          DateTime       @default(now())
    updatedAt          DateTime       @updatedAt
    userAInSocialLinks SocialLink[]   @relation("SocialLinkA")
    userBInSocialLinks SocialLink[]   @relation("SocialLinkB")
    videoGames         VideoGame[]
    posts              Post[]
    likedPosts         Post[]         @relation("PostLikes")
    comments           Comment[]
    notifications      Notification[]
}

model SocialLink {
    id        String           @id @default(uuid())
    userA     User             @relation("SocialLinkA", fields: [userAId], references: [id], onDelete: Cascade)
    userAId   String
    userB     User             @relation("SocialLinkB", fields: [userBId], references: [id], onDelete: Cascade)
    userBId   String
    status    SocialLinkStatus @default(PENDING)
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt
}

enum SocialLinkStatus {
    PENDING
    ACCEPTED
    BLOCKED
}

model VideoGame {
    id          String   @id @default(uuid())
    externalId  Int      @unique
    title       String
    image       String
    description String
    genres      String[]
    platforms   String[]
    developers  String[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    users       User[]
}

model Post {
    id        String    @id @default(uuid())
    content   String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    author    User      @relation(fields: [authorId], references: [id])
    authorId  String
    likedBy   User[]    @relation("PostLikes")
    comments  Comment[]
}

model Comment {
    id        String   @id @default(uuid())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
}

model Notification {
    id        String   @id @default(uuid())
    type      String
    message   String
    targetUrl String
    read      Boolean  @default(false)
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
}
