generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                   String         @id @default(uuid())
    username             String         @unique
    name                 String
    email                String         @unique
    password             String
    createdAt            DateTime       @default(now())
    updatedAt            DateTime       @updatedAt
    userAInSocialLinks   SocialLink[]   @relation("SocialLinkA")
    userBInSocialLinks   SocialLink[]   @relation("SocialLinkB")
    userAInConversations Conversation[] @relation("ConversationUserA")
    userBInConversations Conversation[] @relation("ConversationUserB")
    messages             Message[]
    videoGames           VideoGame[]
    posts                Post[]
    likedPosts           Post[]         @relation("PostLikes")
    comments             Comment[]
    notifications        Notification[] @relation("NotificationTargetUser")
    notifierOf           Notification[] @relation("NotificationGeneratedBy")
}

model SocialLink {
    id        String           @id @default(uuid())
    userA     User             @relation("SocialLinkA", fields: [userAId], references: [id], onDelete: Cascade)
    userAId   String
    userB     User             @relation("SocialLinkB", fields: [userBId], references: [id], onDelete: Cascade)
    userBId   String
    status    SocialLinkStatus @default(PENDING)
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt

    @@unique([userAId, userBId])
}

enum SocialLinkStatus {
    PENDING
    FRIENDS
    BLOCKED
}

model VideoGame {
    id          String   @id @default(uuid())
    externalId  Int      @unique
    title       String
    image       String
    description String
    genres      String[]
    platforms   String[]
    developers  String[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    users       User[]
}

model Post {
    id        String    @id @default(uuid())
    content   String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    author    User      @relation(fields: [authorId], references: [id])
    authorId  String
    likedBy   User[]    @relation("PostLikes")
    comments  Comment[]

    @@index([authorId])
}

model Comment {
    id        String   @id @default(uuid())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
}

model Notification {
    id            String                 @id @default(uuid())
    generatedBy   User                   @relation("NotificationGeneratedBy", fields: [generatedById], references: [id])
    generatedById String
    targetUser    User                   @relation("NotificationTargetUser", fields: [targetUserId], references: [id])
    targetUserId  String
    entityType    NotificationEntityType
    entityId      String // ID of the affected entity (post, comment, etc.)
    actionType    NotificationActionType
    read          Boolean                @default(false)
    createdAt     DateTime               @default(now())

    @@index([targetUserId])
}

enum NotificationEntityType {
    POST
    COMMENT
    SOCIAL_LINK
    OTHER
}

enum NotificationActionType {
    MENTION_IN_POST
    MENTION_IN_COMMENT
    REPLY_TO_POST
    SOCIAL_LINK_REQUEST
    SOCIAL_LINK_ACCEPTED
    OTHER
}

model Conversation {
    id        String    @id @default(uuid())
    messages  Message[]
    userA     User      @relation("ConversationUserA", fields: [userAId], references: [id], onDelete: Cascade)
    userAId   String
    userB     User      @relation("ConversationUserB", fields: [userBId], references: [id], onDelete: Cascade)
    userBId   String
    createdAt DateTime  @default(now())
}

model Message {
    id             String       @id @default(uuid())
    content        String
    conversation   Conversation @relation(fields: [conversationId], references: [id])
    conversationId String
    author         User         @relation(fields: [authorId], references: [id])
    authorId       String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
}
